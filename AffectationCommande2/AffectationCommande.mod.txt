###############################  Model ###############################


###############################  Sets  ###############################
 
param n;

param LIEUX{i in 1..n};

################### Variables ###################

var X{i in 1..n, j in 1..n}, binary;
var U{i in 1..n} >= 0;

###################  Constants: Data to load   #########################

param distance{i in 1..n, j in 1..n};

################### Constraints ###################

s.t. DepartChaqueLieu{i in 1..n}:
  sum{j in 1..n} X[i,j] = 1;

s.t. ArriveeChaqueLieu{j in 1..n}:
  sum{i in 1..n} X[i,j] = 1;

s.t. PasReflexivite{i in 1..n}:
  X[i,i] = 0;

s.t. EviterBoucle{i in 1..n, j in 2..n : i <> j}:
  U[j] - distance[i,j] - U[i] >= -(1 - X[i,j])*1000;

###### Objective ######

minimize Cout: 
	sum{i in 1..n, j in 1..n} X[i,j] * distance[i,j];
end;